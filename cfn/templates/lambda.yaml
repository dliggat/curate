AWSTemplateFormatVersion: "2010-09-09"

Description: Configuration for curate - Lambda, DynamoDB, SQS

Parameters:
  ProjectName:
    Type: String
    Description: Name for this project; e.g. downtime-notifier, dynamodb-scaler

  EnvironmentName:
    Type: String
    Description: Name for this environment; e.g. development, staging, production

  ScheduleExpression:
    Type: String
    Default: ""
    Description: How often to invoke the function (e.g. 'rate(24 hours)'), or empty string to skip creating a AWS::Events::Rule

  Runtime:
    Type: String
    Description: Runtime for the function; e.g. python2.7

  Timeout:
    Type: Number
    Description: Timeout for the function in seconds

  MemorySize:
    Type: Number
    Description: Memory for the function in MB

  VisibilityTimeout:
    Type: Number

  MessageRetentionPeriod:
    Type: Number
  
  MessageRedriveCount:
    Type: Number

  TableSuffix:
    Type: String
    Description: Suffix for the DyanamoDB Table. Table Name will be <projectname>-<environemtname>-<tablesuffix>

Conditions:
  HasSchedule:
    "Fn::Not":
      - "Fn::Equals":
          - { Ref: ScheduleExpression }
          - ""

Resources:
  Queue:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: { Ref: MessageRetentionPeriod }
      VisibilityTimeout: { Ref: VisibilityTimeout }
      RedrivePolicy:
        deadLetterTargetArn:
          "Fn::GetAtt": [DeadLetterQueue, Arn]
        maxReceiveCount: { Ref: MessageRedriveCount }

  DeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: DeadLetterQueue
      MessageRetentionPeriod: { Ref: MessageRetentionPeriod }
      VisibilityTimeout: { Ref: VisibilityTimeout }

  LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      Comment:
        "Fn::Sub":
          "Function for ${ProjectName}-${EnvironmentName}"
    DependsOn: [ LambdaFunctionExecutionRole ]
    Properties:
      Code:
        ZipFile:
          "Fn::Sub":
            - |-
              import boto3
              import json
              import logging
              import datetime

              logging.basicConfig()
              logger = logging.getLogger(__name__)
              logger.setLevel(logging.INFO)

              MAX_DELAY_SECONDS = 900

              def handler(event, context):
                  table = '${table}'
                  queue_url = '${queue_url}'
                  resource = boto3.resource('dynamodb')
                  client = boto3.client('sqs')
                  dynamo = resource.Table(table)
                  response = dynamo.scan()
                  data = response['Items']
                  d = datetime.datetime.now()
                  d -= datetime.timedelta(days=31) # doesnt need to be accurate, but needs to be in previous month
                  while 'LastEvaluatedKey' in response:
                      response = table.scan(ExclusiveStartKey=response['LastEvaluatedKey'])
                      data.extend(response['Items'])

                  for item in data:
                      payload = json.dumps(item)
                      client.send_message(QueueUrl=queue_url, MessageBody=payload)

                      # Process previous months CUR at certain periods of the new month. Previous CUR gets updated due to credits, EDP discounts etc post months completion
                      if (d.day >= 4 and d.day <= 8) or (d.day >= 14 and d.day <= 16):
                        if d.hour > 2 and d.hour < 14:
                          item["date"] = d.strftime("%Y%m%d")
                          payload = json.dumps(item)
                          client.send_message(QueueUrl=queue_url, MessageBody=payload)

            - table: { Ref: ResultTable }
              queue_url: { Ref: Queue }


      Role: { "Fn::GetAtt": [ LambdaFunctionExecutionRole, Arn ] }
      Timeout: { Ref: Timeout }
      Handler: index.handler
      Runtime: { Ref: Runtime }
      MemorySize: { Ref: MemorySize }
      DeadLetterConfig:
        TargetArn:
          "Fn::GetAtt": [DeadLetterQueue, Arn]
      Environment:
        Variables:
          EnvironmentName: { Ref: EnvironmentName }
          ProjectName: { Ref: ProjectName }


  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - "Fn::Join":
                  - ""
                  - - "arn:aws:iam::"
                    - { Ref: "AWS::AccountId" }
                    - ":"
                    - "root"
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: WriteLogsToCloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: DescribeSGsForAccountId
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeSecurityGroups"
                Resource: "*"
        - PolicyName: ReadWriteDynamoResultTable
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  "Fn::Join":
                    - ":"
                    - - "arn"
                      - "aws"
                      - "dynamodb"
                      - { "Ref": "AWS::Region" }
                      - { "Ref" : "AWS::AccountId" }
                      - "Fn::Join":
                        - "/"
                        - - "table"
                          - { "Ref" : "ResultTable" }
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                Resource:
                  "Fn::GetAtt": [Queue, Arn]
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                Resource:
                  "Fn::GetAtt": [DeadLetterQueue, Arn]

  ResultTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName:
        Fn::Sub:
            "${ProjectName}-${EnvironmentName}-${TableSuffix}"
      AttributeDefinitions:
        - AttributeName: cur_report_descriptor
          AttributeType: S
      KeySchema:
        - AttributeName: cur_report_descriptor
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

  # Permits the events service to invoke the service.
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: HasSchedule
    Properties:
      Action: lambda:InvokeFunction
      SourceArn:
        "Fn::GetAtt": [ ScheduledRule, Arn ]
      FunctionName: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
      Principal: events.amazonaws.com

  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName:
        Fn::Sub:
          "${ProjectName}-${EnvironmentName}-Alert-Topic"

  DLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 1
      AlarmDescription: Alarm if DLQ contains items
      Period: 60
      AlarmActions:
        - { Ref: AlertTopic }
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value:
            "Fn::GetAtt": [DeadLetterQueue, QueueName]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: ApproximateNumberOfMessagesVisible

  # The cron rule for the execution.
  ScheduledRule:
    Type: AWS::Events::Rule
    Condition: HasSchedule
    Properties:
      Description:
        "Fn::Sub":
          "Scheduled rule for ${ProjectName}-${EnvironmentName}"
      ScheduleExpression: { Ref : ScheduleExpression }
      State: ENABLED
      Targets:
        - Arn: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
          Id: ScheduledRule

Outputs:
  QueueUrl:
    Value: { Ref: Queue }
    Export:
      Name:
        "Fn::Join":
          - "-"
          - - { Ref: ProjectName }
            - { Ref: EnvironmentName }
            - queue
            - url
  QueueArn:
    Value:
      "Fn::GetAtt": [Queue, Arn]
    Export:
      Name:
        "Fn::Join":
          - "-"
          - - { Ref: ProjectName }
            - { Ref: EnvironmentName }
            - queue
            - arn
  QueueName:
    Value:
      "Fn::GetAtt": [Queue, QueueName]
    Export:
      Name:
        "Fn::Join":
          - "-"
          - - { Ref: ProjectName }
            - { Ref: EnvironmentName }
            - queue
            - name
  LambdaFunction:
    Value: { Ref : LambdaFunction }
  LambdaFunctionARN:
    Value: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
  LambdaFunctionExecutionRole:
    Value: { Ref : LambdaFunctionExecutionRole }
  LambdaFunctionExecutionRoleARN:
    Value: { "Fn::GetAtt": [ LambdaFunctionExecutionRole, Arn ] }
  SigninUrl:
    Value:
      "Fn::Sub": |
        https://signin.aws.amazon.com/switchrole?account=${AWS::AccountId}&roleName=${LambdaFunctionExecutionRole}&displayName=assumed-role
  TestCommand:
    Value:
      "Fn::Sub": |
        aws lambda invoke --function-name ${LambdaFunction} /tmp/${LambdaFunction}-output.txt; cat /tmp/${LambdaFunction}-output.txt
