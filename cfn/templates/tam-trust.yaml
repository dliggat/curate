AWSTemplateFormatVersion: "2010-09-09"

Description: A role that grants access to Athena for TAM's to query tables in there groups database

Parameters:
  ProjectName:
    Type: String
    Description: Name for this project; e.g. downtime-notifier, dynamodb-scaler

  EnvironmentName:
    Type: String
    Description: Name for this environment; e.g. development, staging, production

  DatabaseName:
    Type: String
    Description: The name of the database which the team belongs to

  AWSAccounts:
    Type: List<Number>
    Description: List of TAM AWS Accounts to give access too.

Resources:
  CrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: "tam_access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - athena:GetCatalogs
                  - athena:GetNamespaces
                  - athena:GetTables
                  - athena:GetTable
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - athena:RunQuery
                  - athena:StartQueryExecution
                  - athena:StopQueryExecution
                  - athena:ListQueryExecutions
                  - athena:BatchGetQueryExecution
                  - athena:ListNamedQueries
                  - athena:CreateNamedQuery
                  - athena:BatchGetNamedQuery
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:GetTable
                  - glue:GetTables
                  - glue:GetPartition
                  - glue:GetPartitions
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:PutObject
                Resource:
                  "Fn::Join":
                    - ""
                    - - "arn:aws:s3:::aws-athena-query-results-"
                      - Ref: "AWS::AccountId"
                      - "-"
                      - Ref: "AWS::Region"
                      - "/"
                      - Ref: DatabaseName
                      - "/*"
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                Resource: 
                  "Fn::Join":
                      - ""
                      - - "arn:aws:s3:::aws-athena-query-results-"
                        - Ref: "AWS::AccountId"
                        - "-"
                        - Ref: "AWS::Region"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListObjects
                Resource:
                  - "Fn::Join":
                    - ""
                    - - "Fn::ImportValue":
                          "Fn::Join":
                            - "-"
                            - - { Ref: ProjectName }
                              - { Ref: EnvironmentName }
                              - bucket
                              - arn
                      - "/parquet-cur/"
                      - Ref: DatabaseName
                      - "/*"
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource: 
                  - "Fn::Join":
                    - ""
                    - - "Fn::ImportValue":
                          "Fn::Join":
                            - "-"
                            - - { Ref: ProjectName }
                              - { Ref: EnvironmentName }
                              - bucket
                              - arn
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              AWS: { Ref: AWSAccounts }
      
  KmsDataKeyAlias:
    Type: "AWS::KMS::Alias"
    DependsOn: KmsDataKey
    Properties:
      AliasName:
        "Fn::Sub": "alias/${ProjectName}-${EnvironmentName}-${DatabaseName}-data-key"
      TargetKeyId: { Ref: KmsDataKey }
      
  KmsDataKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: 
        "Fn::Sub": "KMS Data key for ${ProjectName}-${EnvironmentName}-${DatabaseName}"
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: "KeyPolicyForKMS"
        Statement:
          - Sid: "CURate Admin Permissions"
            Effect: "Allow"
            Principal:
              AWS:
                "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/Admin"
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: "CURate Instance Permissions"
            Effect: "Allow"
            Principal:
              AWS:
                "Fn::ImportValue":
                  "Fn::Join":
                    - "-"
                    - - { Ref: ProjectName }
                      - { Ref: EnvironmentName }
                      - "asg"
                      - "instanceprofile"
                      - "arn"
            Action:
              - kms:Encrypt
              - kms:GenerateDataKey
            Resource: "*"
          - Sid: "CURate TAM Permissions"
            Effect: "Allow"
            Principal:
              AWS:
                "Fn::GetAtt": [CrossAccountRole, Arn]
            Action:
              - kms:Decrypt
            Resource: "*"


Outputs:
  CrossAccountRoleName:
    Value: { Ref: CrossAccountRole }
  CrossAccountRoleArn:
    Value:
      "Fn::GetAtt":
        - CrossAccountRole
        - Arn

  SigninUrl:
    Value:
      "Fn::Join":
        - ""
        - - "https://signin.aws.amazon.com/switchrole?account="
          - { Ref: "AWS::AccountId" }
          - "&roleName="
          - { Ref: CrossAccountRole }
  KmsDataKeyArn:
    Value:
      "Fn::GetAtt":
        - KmsDataKey
        - Arn
