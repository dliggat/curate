AWSTemplateFormatVersion: "2010-09-09"

Description: Configuration for curate - Lambda, DynamoDB, SQS

Parameters:
  ProjectName:
    Type: String
    Description: Name for this project; e.g. downtime-notifier, dynamodb-scaler

  EnvironmentName:
    Type: String
    Description: Name for this environment; e.g. development, staging, production

  ScheduleExpression:
    Type: String
    Default: ""
    Description: How often to invoke the function (e.g. 'rate(24 hours)'), or empty string to skip creating a AWS::Events::Rule

  Runtime:
    Type: String
    Description: Runtime for the function; e.g. python2.7

  Timeout:
    Type: Number
    Description: Timeout for the function in seconds

  MemorySize:
    Type: Number
    Description: Memory for the function in MB

  SubnetAZ0ExportIdentifier:
    Type: String

  SubnetAZ1ExportIdentifier:
    Type: String
  
  VpcExportIdentifier:
    Type: String

  LambdaVPCSecurityGroupExportIdenifier:
    Type: String

Conditions:
  HasSchedule:
    "Fn::Not":
      - "Fn::Equals":
          - { Ref: ScheduleExpression }
          - ""

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      Comment:
        "Fn::Sub":
          "Function for ${ProjectName}-${EnvironmentName}"
    DependsOn: [ LambdaFunctionExecutionRole ]
    Properties:
      Code:
        ZipFile:
          "Fn::Sub":
            - |-
              import boto3
              import json
              import logging
              from botocore.vendored import requests

              logging.basicConfig()
              logger = logging.getLogger(__name__)
              logger.setLevel(logging.INFO)

              defaultDimension = [ 
                {
                  'Name': 'QueueName',
                  'Value': '${queue_name}'
                }
              ]

              asgDimension = [ 
                {
                  'Name': 'AsgName',
                  'Value': '${asg_name}'
                }
              ]

              def instanceHealthy(instance):
                client = boto3.client('ec2')
                response = client.describe_instances(
                  InstanceIds=[instance]
                )
                i = response["Reservations"][0]["Instances"][0]
                try:
                  r = requests.get("http://{}/health".format(i["PrivateIpAddress"]))
                except requests.exceptions.RequestException as e:
                  logger.info("Instance Healthcheck failed: {}".format(e))
                  return False
                if r.status_code != 200:
                  logger.info("Instance Healthcheck response: {}".format(r.status_code))
                  return False
                return True

              def publish_metric(value, metric_name, namespace='Custom', dimension=defaultDimension):
                client = boto3.client('cloudwatch')
                client.put_metric_data(
                  Namespace=namespace,
                  MetricData=[
                    {
                      'MetricName': metric_name,
                      'Value': int(value),
                      'Dimensions': dimension
                    }
                  ]
                )

              def handler(event, context):
                  queue_url = '${queue_url}'
                  asg_name = '${asg_name}'
                  client = boto3.client('sqs')
                  asg = boto3.client('autoscaling')

                  rSQS = client.get_queue_attributes(
                    QueueUrl=queue_url,
                    AttributeNames=['All']
                  )
                  publish_metric(rSQS["Attributes"]["ApproximateNumberOfMessages"], "ApproximateNumberOfMessagesVisible", "Curate")
                  publish_metric(rSQS["Attributes"]["ApproximateNumberOfMessagesNotVisible"], "ApproximateNumberOfMessagesNotVisible", "Curate")

                  rASG = asg.describe_auto_scaling_groups(
                    AutoScalingGroupNames=[asg_name]
                  )
                  if len(rASG["AutoScalingGroups"]) > 0:
                    instance_total = instance_idle = 0
                    for instance in rASG["AutoScalingGroups"][0]["Instances"]:
                        instance_total += 1
                        if instance["ProtectedFromScaleIn"] == False and instance["LifecycleState"] == 'InService' and instance["HealthStatus"] == 'Healthy':
                          instance_idle += 1
                        if instance["ProtectedFromScaleIn"] == True and not instanceHealthy(instance["InstanceId"]):
                          logger.info("Removing instance proctection on {} - failed health check".format(instance["InstanceId"]))
                          asg.set_instance_protection(
                            InstanceIds=[instance["InstanceId"]],
                            AutoScalingGroupName=asg_name,
                            ProtectedFromScaleIn=False
                          )
                    publish_metric(instance_idle, "NumberofInstancesIdle", "Curate", asgDimension)
                    publish_metric(int(rSQS["Attributes"]["ApproximateNumberOfMessages"]) - instance_total, "QueuetoAsgFactor", "Curate") 

            - queue_url: 
                "Fn::ImportValue":
                  "Fn::Join":
                    - "-"
                    - - { Ref: ProjectName }
                      - { Ref: EnvironmentName }
                      - queue
                      - url
              queue_name: 
                "Fn::ImportValue":
                  "Fn::Join":
                    - "-"
                    - - { Ref: ProjectName }
                      - { Ref: EnvironmentName }
                      - queue
                      - name
              asg_name:
                "Fn::ImportValue":
                  "Fn::Join":
                    - "-"
                    - - { Ref: ProjectName }
                      - { Ref: EnvironmentName }
                      - "asg"
                      - "name"

      Role: { "Fn::GetAtt": [ LambdaFunctionExecutionRole, Arn ] }
      Timeout: { Ref: Timeout }
      Handler: index.handler
      Runtime: { Ref: Runtime }
      MemorySize: { Ref: MemorySize }
      Environment:
        Variables:
          EnvironmentName: { Ref: EnvironmentName }
          ProjectName: { Ref: ProjectName }
      VpcConfig:
        SubnetIds:
          - "Fn::ImportValue": { Ref: SubnetAZ0ExportIdentifier }
          - "Fn::ImportValue": { Ref: SubnetAZ1ExportIdentifier }
        SecurityGroupIds:
          - "Fn::ImportValue": { Ref: LambdaVPCSecurityGroupExportIdenifier }


  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - "Fn::Join":
                  - ""
                  - - "arn:aws:iam::"
                    - { Ref: "AWS::AccountId" }
                    - ":"
                    - "root"
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: WriteLogsToCloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: CloudwatchPushHighFreqSQSMetrics
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:GetQueueAttributes"
                Resource:
                  "Fn::ImportValue":
                      "Fn::Join":
                        - "-"
                        - - { Ref: ProjectName }
                          - { Ref: EnvironmentName }
                          - queue
                          - arn
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "autoscaling:SetInstanceProtection"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"


  # Permits the events service to invoke the service.
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: HasSchedule
    Properties:
      Action: lambda:InvokeFunction
      SourceArn:
        "Fn::GetAtt": [ ScheduledRule, Arn ]
      FunctionName: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
      Principal: events.amazonaws.com

  # The cron rule for the execution.
  ScheduledRule:
    Type: AWS::Events::Rule
    Condition: HasSchedule
    Properties:
      Description:
        "Fn::Sub":
          "Scheduled rule for ${ProjectName}-${EnvironmentName}"
      ScheduleExpression: { Ref : ScheduleExpression }
      State: ENABLED
      Targets:
        - Arn: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
          Id: ScheduledRule

Outputs:
  LambdaFunction:
    Value: { Ref : LambdaFunction }
  LambdaFunctionARN:
    Value: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
  LambdaFunctionExecutionRole:
    Value: { Ref : LambdaFunctionExecutionRole }
  LambdaFunctionExecutionRoleARN:
    Value: { "Fn::GetAtt": [ LambdaFunctionExecutionRole, Arn ] }
  TestCommand:
    Value:
      "Fn::Sub": |
        aws lambda invoke --function-name ${LambdaFunction} /tmp/${LambdaFunction}-output.txt; cat /tmp/${LambdaFunction}-output.txt
